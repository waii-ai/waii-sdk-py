import json
import os
import unittest
from waii_sdk_py import WAII
from waii_sdk_py.database import ModifyDBConnectionRequest, DBConnection


class TestDatabase(unittest.TestCase):
    def _load_db_conn(self):
        db_conn_str = os.environ.get("WAII_DB_CONN")
        if not db_conn_str:
            raise Exception("""You should set WAII_DB_CONN to env, format like:
        {"db_type": "snowflake", "account_name": "...", "user": "...", "pass": "...", "database": "...", "role": "...", "warehouse": "..."}
        """)

        db_conn_json = json.loads(db_conn_str)

        # load it from json
        self.db_conn = DBConnection(
            key='',  # will be generated by the system
            db_type=db_conn_json['db_type'],
            account_name=db_conn_json['account_name'],
            username=db_conn_json['user'],
            password=db_conn_json['pass'],
            database=db_conn_json['database'],
            warehouse=db_conn_json['warehouse'],
            role=db_conn_json['role']
        )

    def setUp(self):
        WAII.initialize(url="http://localhost:9859/api/")

        result = WAII.Database.get_connections()
        self.result = result

        self._load_db_conn()

        WAII.Database.activate_connection(result.connectors[0].key)

    def test_modify_connections(self):
        # first try to delete te connection if it exists
        result = WAII.Database.get_connections().connectors
        for conn in result:
            if (conn.db_type == self.db_conn.db_type and
                    conn.account_name == self.db_conn.account_name and
                    self.db_conn.database == conn.database and
                    self.db_conn.username == conn.username):
                result = WAII.Database.modify_connections(ModifyDBConnectionRequest(removed=[conn.key])).connectors
                break

        # then add the new connection
        new_result = WAII.Database.modify_connections(ModifyDBConnectionRequest(updated=[self.db_conn])).connectors

        assert len(result) == len(new_result) - 1

        # then activate the new connection
        for conn in new_result:
            if (conn.db_type == self.db_conn.db_type and
                    conn.account_name == self.db_conn.account_name and
                    self.db_conn.database == conn.database and
                    self.db_conn.username == conn.username):
                WAII.Database.activate_connection(conn.key)
                break
        else:
            raise Exception("Cannot find the new connection")

        # list databases
        result = WAII.Database.get_catalogs()
        assert len(result.catalogs) > 0


    def test_get_connections(self):
        # Call the function
        result = WAII.Database.get_connections()
        # Check the result
        # Note: The specifics of this assertion would depend on what the function should return
        self.assertEqual(len(result.connectors), len(self.result.connectors))

        # Define test parameters
        params = ModifyDBConnectionRequest(
            updated = [],
            removed = []
        )
        # Call the function
        result = WAII.Database.modify_connections(params)
        # Check the result
        # Note: The specifics of this assertion would depend on what the function should return
        self.assertEqual(len(result.connectors), len(self.result.connectors))

    def test_activate_connection(self):
        # Define test parameters
        # Call the function
        WAII.Database.activate_connection(self.result.connectors[0].key)
        
    def test_get_catalogs(self):
        # Call the function
        result = WAII.Database.get_catalogs()
        assert len(result.catalogs) > 0

    def test_initial_connect(self):
        # because now we select first connection by default
        result = WAII.Database.get_catalogs()
        assert len(result.catalogs) > 0

        assert len(WAII.Database.get_activated_connection()) > 0

    def test_call_without_activated_connection(self):
        WAII.Database.activate_connection('')
        with self.assertRaises(Exception):
            result = WAII.Database.get_catalogs()

# NEED TO ADD FOR UPDATE TABLE AND UPDATE SCHEMA
if __name__ == '__main__':
    unittest.main()
